[gd_scene load_steps=9 format=2]

[ext_resource path="res://scripts/Cell.gd" type="Script" id=1]
[ext_resource path="res://sprites/player.svg" type="Texture" id=2]

[sub_resource type="CircleShape2D" id=1]

[sub_resource type="Shader" id=3]
code = "shader_type canvas_item;

uniform vec4 color : hint_color = vec4(1.0);
uniform float width : hint_range(0, 30) = 1.0;
uniform int pattern : hint_range(0, 2) = 0; // diamond, circle, square
uniform bool inside = false;
uniform bool add_margins = true; // only useful when inside is false

void vertex() {
	if (add_margins) {
		VERTEX += (UV * 2.0 - 1.0) * width;
	}
}

bool hasContraryNeighbour(vec2 uv, vec2 texture_pixel_size, sampler2D texture) {
	for (float i = -ceil(width); i <= ceil(width); i++) {
		float x = abs(i) > width ? width * sign(i) : i;
		float offset;
		
		if (pattern == 0) {
			offset = width - abs(x);
		} else if (pattern == 1) {
			offset = floor(sqrt(pow(width + 0.5, 2) - x * x));
		} else if (pattern == 2) {
			offset = width;
		}
		
		for (float j = -ceil(offset); j <= ceil(offset); j++) {
			float y = abs(j) > offset ? offset * sign(j) : j;
			vec2 xy = uv + texture_pixel_size * vec2(x, y);
			
			if ((xy != clamp(xy, vec2(0.0), vec2(1.0)) || texture(texture, xy).a == 0.0) == inside) {
				return true;
			}
		}
	}
	
	return false;
}

void fragment() {
	vec2 uv = UV;
	
	if (add_margins) {
		vec2 texture_pixel_size = vec2(1.0) / (vec2(1.0) / TEXTURE_PIXEL_SIZE + vec2(width * 2.0));
		
		uv = (uv - texture_pixel_size * width) * TEXTURE_PIXEL_SIZE / texture_pixel_size;
		
		if (uv != clamp(uv, vec2(0.0), vec2(1.0))) {
			COLOR.a = 0.0;
		} else {
			COLOR = texture(TEXTURE, uv);
		}
	} else {
		COLOR = texture(TEXTURE, uv);
	}
	
	if ((COLOR.a > 0.0) == inside && hasContraryNeighbour(uv, TEXTURE_PIXEL_SIZE, TEXTURE)) {
		COLOR.rgb = inside ? mix(COLOR.rgb, color.rgb, color.a) : color.rgb;
		COLOR.a += (1.0 - COLOR.a) * color.a;
	}
}"

[sub_resource type="ShaderMaterial" id=4]
shader = SubResource( 3 )
shader_param/color = Color( 0.898039, 0.898039, 0.898039, 1 )
shader_param/width = 15.0
shader_param/pattern = 0
shader_param/inside = true
shader_param/add_margins = true

[sub_resource type="DynamicFontData" id=5]
font_path = "res://NEAT_usability/fonts/Data/Roboto-Regular.ttf"

[sub_resource type="DynamicFont" id=6]
size = 72
outline_size = 4
font_data = SubResource( 5 )

[sub_resource type="CircleShape2D" id=2]

[node name="Cell" type="KinematicBody2D" groups=["Cell"]]
script = ExtResource( 1 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
shape = SubResource( 1 )
disabled = true

[node name="Shape" type="Sprite" parent="."]
self_modulate = Color( 0.756863, 0.913725, 0.45098, 1 )
material = SubResource( 4 )
scale = Vector2( 0.1, 0.1 )
texture = ExtResource( 2 )

[node name="MassLabel" type="Label" parent="Shape"]
margin_left = -75.0
margin_top = -50.0
margin_right = 69.0
margin_bottom = 101.0
custom_colors/font_outline_modulate = Color( 0, 0, 0, 1 )
custom_fonts/font = SubResource( 6 )
text = "0"
align = 1

[node name="Ray0" type="RayCast2D" parent="."]
rotation = 1.5708
cast_to = Vector2( 0, -500 )
collide_with_areas = true

[node name="Ray1" type="RayCast2D" parent="."]
rotation = 1.9635
cast_to = Vector2( 0, -500 )
collide_with_areas = true

[node name="Ray2" type="RayCast2D" parent="."]
rotation = 2.35619
cast_to = Vector2( 0, -500 )
collide_with_areas = true

[node name="Ray3" type="RayCast2D" parent="."]
rotation = 2.74889
cast_to = Vector2( 0, -500 )
collide_with_areas = true

[node name="Ray4" type="RayCast2D" parent="."]
rotation = 3.14159
cast_to = Vector2( 0, -500 )
collide_with_areas = true

[node name="Ray5" type="RayCast2D" parent="."]
rotation = -2.7489
cast_to = Vector2( 0, -500 )
collide_with_areas = true

[node name="Ray6" type="RayCast2D" parent="."]
rotation = -2.3562
cast_to = Vector2( 0, -500 )
collide_with_areas = true

[node name="Ray7" type="RayCast2D" parent="."]
rotation = -1.9635
cast_to = Vector2( 0, -500 )
collide_with_areas = true

[node name="Ray8" type="RayCast2D" parent="."]
rotation = -1.5708
cast_to = Vector2( 0, -500 )
collide_with_areas = true

[node name="Ray9" type="RayCast2D" parent="."]
rotation = -1.1781
cast_to = Vector2( 0, -500 )
collide_with_areas = true

[node name="Ray10" type="RayCast2D" parent="."]
rotation = -0.785395
cast_to = Vector2( 0, -500 )
collide_with_areas = true

[node name="Ray11" type="RayCast2D" parent="."]
rotation = -0.392695
cast_to = Vector2( 0, -500 )
collide_with_areas = true

[node name="Ray12" type="RayCast2D" parent="."]
cast_to = Vector2( 0, -500 )
collide_with_areas = true

[node name="Ray13" type="RayCast2D" parent="."]
rotation = 0.392699
cast_to = Vector2( 0, -500 )
collide_with_areas = true

[node name="Ray14" type="RayCast2D" parent="."]
rotation = 0.785398
cast_to = Vector2( 0, -500 )
collide_with_areas = true

[node name="Ray15" type="RayCast2D" parent="."]
rotation = 1.1781
cast_to = Vector2( 0, -500 )
collide_with_areas = true

[node name="Area2D" type="Area2D" parent="."]
visible = false

[node name="CollisionShape2D" type="CollisionShape2D" parent="Area2D"]
shape = SubResource( 2 )

[connection signal="area_entered" from="Area2D" to="." method="_on_Area2D_area_entered"]
[connection signal="area_exited" from="Area2D" to="." method="_on_Area2D_area_exited"]
